--- cipher-ctr-mt.c.old	2017-09-04 19:47:28.339908844 +0100
+++ cipher-ctr-mt.c	2017-09-04 19:55:35.912080296 +0100
@@ -422,7 +422,7 @@
 		destp.u += AES_BLOCK_SIZE;
 		srcp.u += AES_BLOCK_SIZE;
 		len -= AES_BLOCK_SIZE;
-		ssh_ctr_inc(ctx->iv, AES_BLOCK_SIZE);
+		ssh_ctr_inc(EVP_CIPHER_CTX_iv_noconst(ctx), AES_BLOCK_SIZE);
 
 		/* Increment read index, switch queues on rollover */
 		if ((ridx = (ridx + 1) % KQLEN) == 0) {
@@ -500,16 +500,16 @@
 	}
 
 	if (iv != NULL) {
-		memcpy(ctx->iv, iv, AES_BLOCK_SIZE);
+	        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, AES_BLOCK_SIZE);
 		c->state |= HAVE_IV;
 	}
 
 	if (c->state == (HAVE_KEY | HAVE_IV)) {
 		/* Clear queues */
-		memcpy(c->q[0].ctr, ctx->iv, AES_BLOCK_SIZE);
+	        memcpy(c->q[0].ctr, EVP_CIPHER_CTX_iv(ctx), AES_BLOCK_SIZE);
 		c->q[0].qstate = KQINIT;
 		for (i = 1; i < NUMKQ; i++) {
-			memcpy(c->q[i].ctr, ctx->iv, AES_BLOCK_SIZE);
+		        memcpy(c->q[i].ctr, EVP_CIPHER_CTX_iv(ctx), AES_BLOCK_SIZE);
 			ssh_ctr_add(c->q[i].ctr, i * KQLEN, AES_BLOCK_SIZE);
 			c->q[i].qstate = KQEMPTY;
 		}
@@ -582,21 +582,18 @@
 const EVP_CIPHER *
 evp_aes_ctr_mt(void)
 {
-	static EVP_CIPHER aes_ctr;
+	EVP_CIPHER *aes_ctr;
 
-	memset(&aes_ctr, 0, sizeof(EVP_CIPHER));
-	aes_ctr.nid = NID_undef;
-	aes_ctr.block_size = AES_BLOCK_SIZE;
-	aes_ctr.iv_len = AES_BLOCK_SIZE;
-	aes_ctr.key_len = 16;
-	aes_ctr.init = ssh_aes_ctr_init;
-	aes_ctr.cleanup = ssh_aes_ctr_cleanup;
-	aes_ctr.do_cipher = ssh_aes_ctr;
+	aes_ctr = EVP_CIPHER_meth_new(NID_undef, AES_BLOCK_SIZE, 16);
+	EVP_CIPHER_meth_set_iv_length(aes_ctr, AES_BLOCK_SIZE);
+	EVP_CIPHER_meth_set_init(aes_ctr, ssh_aes_ctr_init);
+	EVP_CIPHER_meth_set_cleanup(aes_ctr, ssh_aes_ctr_cleanup);
+	EVP_CIPHER_meth_set_do_cipher(aes_ctr, ssh_aes_ctr);
 #ifndef SSH_OLD_EVP
-	aes_ctr.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH |
-	    EVP_CIPH_ALWAYS_CALL_INIT | EVP_CIPH_CUSTOM_IV;
+	EVP_CIPHER_meth_set_flags(aes_ctr, EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH |
+				  EVP_CIPH_ALWAYS_CALL_INIT | EVP_CIPH_CUSTOM_IV);
 #endif
-	return &aes_ctr;
+	return aes_ctr;
 }
 
 #endif /* defined(WITH_OPENSSL) */
