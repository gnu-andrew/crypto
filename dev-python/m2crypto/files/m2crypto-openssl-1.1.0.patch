--- a/SWIG/_engine.i.old	2018-01-19 07:36:54.277621955 +0000
+++ b/SWIG/_engine.i	2018-01-19 07:35:46.318710907 +0000
@@ -24,13 +24,19 @@
 extern void ENGINE_load_builtin_engines(void);
 
 %rename(engine_load_dynamic) ENGINE_load_dynamic;
+#if OPENSSL_API_COMPAT < 0x10100000L
 extern void ENGINE_load_dynamic(void);
+#endif
 
 %rename(engine_load_openssl) ENGINE_load_openssl;
+#if OPENSSL_API_COMPAT < 0x10100000L
 extern void ENGINE_load_openssl(void);
+#endif
 
+#if OPENSSL_API_COMPAT < 0x10100000L
 %rename(engine_cleanup) ENGINE_cleanup;
 extern void ENGINE_cleanup(void);
+#endif
 
 /*
  * Engine allocation functions
@@ -85,6 +91,16 @@
 %clear const char *;
 %inline %{
 
+#if OPENSSL_API_COMPAT < 0x10100000L
+void ENGINE_load_dynamic(void) {
+    OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_DYNAMIC, NULL);
+}
+void ENGINE_load_openssl(void) {
+    OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_OPENSSL, NULL);
+}
+void ENGINE_cleanup(void) {}
+#endif
+    
 /*
  * Code from engine-pkcs11 1.4.0 in engine-pkcs11.c
  *
--- a/SWIG/_rand.i.old	2017-10-05 21:43:17.000000000 +0100
+++ a/SWIG/_rand.i	2018-01-19 03:05:22.258454846 +0000
@@ -16,8 +16,10 @@
 extern int RAND_poll(void);
 %rename(rand_status) RAND_status;
 extern int RAND_status(void);
+#if OPENSSL_API_COMPAT < 0x10100000L
 %rename(rand_cleanup) RAND_cleanup;
 extern void RAND_cleanup(void);
+#endif
 
 %warnfilter(454) _rand_err;
 %inline %{
@@ -86,8 +90,13 @@
         PyMem_Free(blob);
         return NULL;
     }
+#if OPENSSL_API_COMPAT < 0x10100000L
     ret = RAND_pseudo_bytes(blob, n);
     if (ret == -1) {
+#else
+    ret = RAND_bytes(blob, n);
+    if (ret != 1) {
+#endif        
         PyMem_Free(blob);
         Py_DECREF(tuple);
         Py_RETURN_NONE;
@@ -139,6 +141,10 @@
     return 0;
 #endif
 }
+
+#if OPENSSL_API_COMPAT >= 0x10100000L
+void RAND_cleanup(void) {}
+#endif
 %}
 
 /* 
--- a/SWIG/_ssl.i.old	2017-10-05 21:43:17.000000000 +0100
+++ a/SWIG/_ssl.i	2018-01-19 03:36:10.776885908 +0000
@@ -258,8 +258,13 @@
 static PyObject *_ssl_timeout_err;
 
 void ssl_init(PyObject *ssl_err, PyObject *ssl_timeout_err) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     SSL_library_init();
     SSL_load_error_strings();
+#else
+    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS |
+                     OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
+#endif
     Py_INCREF(ssl_err);
     Py_INCREF(ssl_timeout_err);
     _ssl_err = ssl_err;
@@ -276,13 +281,19 @@
 }
 #endif
 
+#ifndef OPENSSL_NO_TLS1_METHOD
 const SSL_METHOD *tlsv1_method(void) {
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L
     PyErr_WarnEx(PyExc_DeprecationWarning,
                  "Function TLSv1_method has been deprecated.", 1);
 #endif
+#if OPENSSL_API_COMPAT < 0x10100000L
     return TLSv1_method();
+#else
+    return TLS_method();
+#endif
 }
+#endif
 
 void ssl_ctx_passphrase_callback(SSL_CTX *ctx, PyObject *pyfunc) {
     SSL_CTX_set_default_passwd_cb(ctx, passphrase_callback);
@@ -407,14 +418,22 @@
 }
 
 long ssl_ctx_set_tmp_rsa(SSL_CTX *ctx, RSA* rsa) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     return SSL_CTX_set_tmp_rsa(ctx, rsa);
+#else
+    return 1;
+#endif
 }
 
 void ssl_ctx_set_tmp_rsa_callback(SSL_CTX *ctx,  PyObject *pyfunc) {
     Py_XDECREF(ssl_set_tmp_rsa_cb_func);
     Py_INCREF(pyfunc);
     ssl_set_tmp_rsa_cb_func = pyfunc;
+#if OPENSSL_API_COMPAT < 0x10100000L
     SSL_CTX_set_tmp_rsa_callback(ctx, ssl_set_tmp_rsa_callback);
+#else
+    ssl_set_tmp_rsa_callback(NULL, 0, 0);
+#endif
 }
 
 int ssl_ctx_load_verify_locations(SSL_CTX *ctx, const char *cafile, const char *capath) {
--- a/SWIG/_util.i.old	2017-10-05 21:43:17.000000000 +0100
+++ a/SWIG/_util.i	2018-01-19 03:43:18.778048428 +0000
@@ -25,7 +25,11 @@
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return NULL;
 
+#if OPENSSL_API_COMPAT < 0x10100000L
     ret = hex_to_string((unsigned char *)buf, len);
+#else
+    ret = OPENSSL_buf2hexstr((unsigned char *)buf, len);
+#endif
     if (!ret) {
         m2_PyErr_Msg(_util_err);
         return NULL;
@@ -52,7 +56,11 @@
         return NULL;
 
     len = len0;
+#if OPENSSL_API_COMPAT < 0x10100000L
     ret = string_to_hex((char *)buf, &len);
+#else
+    ret = OPENSSL_hexstr2buf((char *)buf, &len);
+#endif
     if (ret == NULL) {
         m2_PyErr_Msg(_util_err);
         return NULL;
--- a/SWIG/_x509.i.old	2017-10-05 21:43:17.000000000 +0100
+++ a/SWIG/_x509.i	2018-01-19 03:40:52.256389167 +0000
@@ -425,22 +425,38 @@
 
 /* X509_set_notBefore() is a macro. */
 int x509_set_not_before(X509 *x, ASN1_TIME *tm) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     return X509_set_notBefore(x, tm);
+#else
+    return X509_set1_notBefore(x, tm);
+#endif
 }
 
 /* X509_get_notBefore() is a macro. */
 ASN1_TIME *x509_get_not_before(X509 *x) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     return X509_get_notBefore(x);
+#else
+    return X509_getm_notBefore(x);
+#endif
 }
 
 /* X509_set_notAfter() is a macro. */
 int x509_set_not_after(X509 *x, ASN1_TIME *tm) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     return X509_set_notAfter(x, tm);
+#else
+    return X509_set1_notAfter(x, tm);
+#endif
 }
 
 /* X509_get_notAfter() is a macro. */
 ASN1_TIME *x509_get_not_after(X509 *x) {
+#if OPENSSL_API_COMPAT < 0x10100000L
     return X509_get_notAfter(x);
+#else
+    return X509_getm_notAfter(x);
+#endif
 }
 
 int x509_sign(X509 *x, EVP_PKEY *pkey, EVP_MD *md) {
--- a/SWIG/_evp.i.old	2017-10-05 21:43:17.000000000 +0100
+++ b/SWIG/_evp.i	2018-01-19 07:39:54.554733251 +0000
@@ -17,6 +17,7 @@
 #include <openssl/evp.h>
 #include <openssl/hmac.h>
 #include <openssl/rsa.h>
+#include <openssl/dsa.h>
 #include <openssl/opensslv.h>
 
 #if OPENSSL_VERSION_NUMBER < 0x10100000L
