--- a/src/html/ksslkeygen.cpp.old	2018-12-01 14:55:39.000000000 +0000
+++ b/src/html/ksslkeygen.cpp	2019-02-15 04:34:37.665220095 +0000
@@ -177,12 +177,25 @@
         return -4;
     }
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    RSA *rsakey = kossl->RSA_new();
+    BIGNUM *exp = kossl->BN_new();
+    kossl->BN_set_word(exp, e);
+    if (!kossl->RSA_generate_key_ex(rsakey, bits, exp, nullptr)) {
+	kossl->BN_free(exp);
+	kossl->RSA_free(rsakey);
+        kossl->X509_REQ_free(req);
+        kossl->EVP_PKEY_free(pkey);
+        return -3;
+    }
+#else
     RSA *rsakey = kossl->RSA_generate_key(bits, e, nullptr, nullptr);
     if (!rsakey) {
         kossl->X509_REQ_free(req);
         kossl->EVP_PKEY_free(pkey);
         return -3;
     }
+#endif
 
     rc = kossl->EVP_PKEY_assign(pkey, EVP_PKEY_RSA, (char *)rsakey);
 
@@ -214,6 +227,10 @@
     if (!csrFile.open()) {
         kossl->X509_REQ_free(req);
         kossl->EVP_PKEY_free(pkey);
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	kossl->BN_free(exp);
+	kossl->RSA_free(rsakey);
+#endif
         return -5;
     }
 
@@ -223,6 +240,10 @@
     if (!p8File.open()) {
         kossl->X509_REQ_free(req);
         kossl->EVP_PKEY_free(pkey);
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	kossl->BN_free(exp);
+	kossl->RSA_free(rsakey);
+#endif
         return -5;
     }
 
@@ -239,6 +260,10 @@
 
     kossl->X509_REQ_free(req);
     kossl->EVP_PKEY_free(pkey);
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    kossl->BN_free(exp);
+    kossl->RSA_free(rsakey);
+#endif
 
     fclose(csr_fs);
     fclose(p8_fs);
--- a/src/html/kopenssl.h.old	2018-12-01 14:55:39.000000000 +0000
+++ b/src/html/kopenssl.h	2019-02-15 04:34:37.685219785 +0000
@@ -41,6 +41,9 @@
 #include <openssl/stack.h>
 #include <openssl/bn.h>
 #undef crypt
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#define STACK OPENSSL_STACK
+#else
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
 #define STACK _STACK
 #define OSSL_SKVALUE_RTYPE void
@@ -50,6 +53,7 @@
 #define OSSL_MORECONST
 #endif
 #endif
+#endif
 
 /**
  * Dynamically load and wrap OpenSSL.
@@ -461,8 +465,12 @@
     /*
      *   Pop off the stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    void *sk_pop(OPENSSL_STACK *s);
+#else
     char *sk_pop(STACK *s);
-
+#endif
+    
     /*
      *   Free the stack
      */
@@ -478,11 +486,18 @@
     /*
      *  Number of elements in the stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int sk_num(const OPENSSL_STACK *s);
+#else
     int sk_num(STACK *s);
+#endif
 
     /*
      *  Value of element n in the stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    void *sk_value(const OPENSSL_STACK *s, int n);
+#else
     char *sk_value(STACK *s, int n);
 
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
@@ -491,15 +506,23 @@
         return sk_value(reinterpret_cast<STACK *>(s), n);
     }
 #endif
+#endif
 
     /*
      *  Create a new stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    OPENSSL_STACK *sk_new(OPENSSL_sk_compfunc cmp);
+#else
     STACK *sk_new(int (*cmp)());
+#endif
 
     /*
      *  Add an element to the stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int sk_push(OPENSSL_STACK *s, const void *d);
+#else
     int sk_push(STACK *s, char *d);
 
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
@@ -508,11 +531,16 @@
         return sk_push(reinterpret_cast<STACK *>(s), reinterpret_cast<char *>(d));
     }
 #endif
+#endif
 
     /*
      *  Duplicate the stack
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    OPENSSL_STACK *sk_dup(const OPENSSL_STACK *s);
+#else
     STACK *sk_dup(STACK *s);
+#endif
 
     /*
      *  Convert an ASN1_INTEGER to its text form
@@ -539,6 +567,23 @@
      */
     int X509_check_private_key(X509 *x, EVP_PKEY *p);
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    /*
+     *  Allocate a BIGNUM
+     */
+    BIGNUM *BN_new();
+
+    /*
+     *  Free a BIGNUM
+     */
+    void BN_free(BIGNUM *a);
+
+    /*
+     *  Set a BIGNUM
+     */
+    int BN_set_word(BIGNUM *a, BN_ULONG w);
+#endif
+
     /*
      *  Convert a BIGNUM to a hex string
      */
@@ -562,7 +607,11 @@
     /*
      *  ASN1_STRING_data
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    const unsigned char* ASN1_STRING_data(const ASN1_STRING *x);
+#else
     unsigned char *ASN1_STRING_data(ASN1_STRING *x);
+#endif
 
     /*
      *  ASN1_STRING_length
@@ -746,8 +795,12 @@
     /*
      * Generate a RSA key
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
+#else
     RSA *RSA_generate_key(int bits, unsigned long e, void
                           (*callback)(int, int, void *), void *cb_arg);
+#endif
 
     /*
      * Create/destroy a certificate request
@@ -803,6 +856,11 @@
     /* Write PKCS#8privatekey to FILE stream */
     int i2d_PKCS8PrivateKey_fp(FILE *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *);
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    /* Allocate an RSA structure */
+    RSA *RSA_new();
+#endif
+
     /* Free RSA structure */
     void RSA_free(RSA *);
 
--- a/src/html/kopenssl.cpp.old	2018-12-01 14:55:39.000000000 +0000
+++ b/src/html/kopenssl.cpp	2019-02-15 04:40:27.927763766 +0000
@@ -28,6 +28,7 @@
 #include <kconfiggroup.h>
 #include <QCoreApplication>
 #include <QFile>
+#include <QFileInfo>
 #include <QLibrary>
 #include <QRegExp>
 
@@ -113,17 +114,31 @@
     static void (*K_X509_STORE_CTX_set_chain)(X509_STORE_CTX *, STACK_OF(X509) *) = nullptr;
     static void (*K_X509_STORE_CTX_set_purpose)(X509_STORE_CTX *, int) = nullptr;
     static void (*K_sk_free)(STACK *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    static int (*K_sk_num)(const OPENSSL_STACK *) = nullptr;
+    static void *(*K_sk_pop)(OPENSSL_STACK *) = nullptr;
+    static void *(*K_sk_value)(const OPENSSL_STACK *, int) = nullptr;
+    static OPENSSL_STACK *(*K_sk_new)(OPENSSL_sk_compfunc) = nullptr;
+    static int (*K_sk_push)(OPENSSL_STACK *, const void *) = nullptr;
+    static OPENSSL_STACK *(*K_sk_dup)(const OPENSSL_STACK *) = nullptr;
+#else
     static int (*K_sk_num)(STACK *) = nullptr;
     static char *(*K_sk_pop)(STACK *) = nullptr;
     static char *(*K_sk_value)(STACK *, int) = nullptr;
     static STACK *(*K_sk_new)(int (*)()) = nullptr;
     static int (*K_sk_push)(STACK *, char *) = nullptr;
     static STACK *(*K_sk_dup)(STACK *) = nullptr;
+#endif
     static char *(*K_i2s_ASN1_INTEGER)(X509V3_EXT_METHOD *, ASN1_INTEGER *) = nullptr;
     static ASN1_INTEGER *(*K_X509_get_serialNumber)(X509 *) = nullptr;
     static EVP_PKEY *(*K_X509_get_pubkey)(X509 *) = nullptr;
     static int (*K_i2d_PublicKey)(EVP_PKEY *, unsigned char **) = nullptr;
     static int (*K_X509_check_private_key)(X509 *, EVP_PKEY *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    static BIGNUM *(*K_BN_new)() = nullptr;
+    static void (*K_BN_free)(BIGNUM *) = nullptr;
+    static int (*K_BN_set_word)(BIGNUM *, BN_ULONG w) = nullptr;
+#endif
     static char *(*K_BN_bn2hex)(const BIGNUM *) = nullptr;
     static int (*K_X509_digest)(const X509 *, const EVP_MD *, unsigned char *, unsigned int *) = nullptr;
     static EVP_MD *(*K_EVP_md5)() = nullptr;
@@ -159,7 +174,12 @@
     static X509_PURPOSE *(*K_X509_PURPOSE_get0)(int) = nullptr;
     static int (*K_EVP_PKEY_assign)(EVP_PKEY *, int, char *) = nullptr;
     static int (*K_X509_REQ_set_pubkey)(X509_REQ *, EVP_PKEY *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    static RSA *(*K_RSA_new)();
+    static int (*K_RSA_generate_key_ex)(RSA* rsa, int bits, BIGNUM *e, BN_GENCB* cb);
+#else
     static RSA *(*K_RSA_generate_key)(int, unsigned long, void (*)(int, int, void *), void *) = nullptr;
+#endif
     static int (*K_i2d_X509_REQ_fp)(FILE *, X509_REQ *) = nullptr;
     static void (*K_ERR_clear_error)() = nullptr;
     static unsigned long(*K_ERR_get_error)() = nullptr;
@@ -189,7 +209,11 @@
     static int (*K_X509_NAME_add_entry_by_txt)(X509_NAME *, char *, int, unsigned char *, int, int, int) = nullptr;
     static X509_NAME *(*K_X509_NAME_new)() = nullptr;
     static int (*K_X509_REQ_set_subject_name)(X509_REQ *, X509_NAME *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    static const unsigned char *(*K_ASN1_STRING_data)(const ASN1_STRING *) = nullptr;
+#else
     static unsigned char *(*K_ASN1_STRING_data)(ASN1_STRING *) = nullptr;
+#endif
     static int (*K_ASN1_STRING_length)(ASN1_STRING *) = nullptr;
     static STACK_OF(SSL_CIPHER) *(*K_SSL_get_ciphers)(const SSL *ssl) = nullptr;
 
@@ -390,7 +414,7 @@
             // someone knows why this is needed?
             QString tmpStr(alib);
             tmpStr.remove(QRegExp("\\(.*\\)"));
-            if (QFile(tmpStr).isReadable()) {
+            if (QFileInfo(tmpStr).isReadable()) {
                 d->cryptoLib = new QLibrary(alib);
                 d->cryptoLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
             }
@@ -455,8 +479,21 @@
         K_EVP_PKEY_new = (EVP_PKEY * (*)()) d->cryptoLib->resolve("EVP_PKEY_new");
         K_X509_REQ_free = (void (*)(X509_REQ *)) d->cryptoLib->resolve("X509_REQ_free");
         K_X509_REQ_new = (X509_REQ * (*)()) d->cryptoLib->resolve("X509_REQ_new");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_X509_STORE_CTX_set_chain = (void (*)(X509_STORE_CTX *, STACK_OF(X509) *)) d->cryptoLib->resolve("X509_STORE_CTX_set0_untrusted");
+#else
         K_X509_STORE_CTX_set_chain = (void (*)(X509_STORE_CTX *, STACK_OF(X509) *)) d->cryptoLib->resolve("X509_STORE_CTX_set_chain");
+#endif
         K_X509_STORE_CTX_set_purpose = (void (*)(X509_STORE_CTX *, int)) d->cryptoLib->resolve("X509_STORE_CTX_set_purpose");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_sk_free = (void (*)(OPENSSL_STACK *)) d->cryptoLib->resolve("OPENSSL_sk_free");
+        K_sk_num = (int (*)(const OPENSSL_STACK *)) d->cryptoLib->resolve("OPENSSL_sk_num");
+        K_sk_pop = (void *(*)(OPENSSL_STACK *)) d->cryptoLib->resolve("OPENSSL_sk_pop");
+        K_sk_value = (void *(*)(const OPENSSL_STACK *, int)) d->cryptoLib->resolve("OPENSSL_sk_value");
+        K_sk_new = (OPENSSL_STACK * (*)(OPENSSL_sk_compfunc)) d->cryptoLib->resolve("OPENSSL_sk_new");
+        K_sk_push = (int (*)(OPENSSL_STACK *, const void *)) d->cryptoLib->resolve("OPENSSL_sk_push");
+        K_sk_dup = (OPENSSL_STACK * (*)(const OPENSSL_STACK *)) d->cryptoLib->resolve("OPENSSL_sk_dup");
+#else
         K_sk_free = (void (*)(STACK *)) d->cryptoLib->resolve("sk_free");
         K_sk_num = (int (*)(STACK *)) d->cryptoLib->resolve("sk_num");
         K_sk_pop = (char *(*)(STACK *)) d->cryptoLib->resolve("sk_pop");
@@ -464,11 +501,17 @@
         K_sk_new = (STACK * (*)(int (*)())) d->cryptoLib->resolve("sk_new");
         K_sk_push = (int (*)(STACK *, char *)) d->cryptoLib->resolve("sk_push");
         K_sk_dup = (STACK * (*)(STACK *)) d->cryptoLib->resolve("sk_dup");
+#endif
         K_i2s_ASN1_INTEGER = (char *(*)(X509V3_EXT_METHOD *, ASN1_INTEGER *)) d->cryptoLib->resolve("i2s_ASN1_INTEGER");
         K_X509_get_serialNumber = (ASN1_INTEGER * (*)(X509 *)) d->cryptoLib->resolve("X509_get_serialNumber");
         K_X509_get_pubkey = (EVP_PKEY * (*)(X509 *)) d->cryptoLib->resolve("X509_get_pubkey");
         K_i2d_PublicKey = (int (*)(EVP_PKEY *, unsigned char **)) d->cryptoLib->resolve("i2d_PublicKey");
         K_X509_check_private_key = (int (*)(X509 *, EVP_PKEY *)) d->cryptoLib->resolve("X509_check_private_key");
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	K_BN_new = (BIGNUM *(*)()) d->cryptoLib->resolve("BN_new");
+	K_BN_free = (void (*)(BIGNUM *)) d->cryptoLib->resolve("BN_free");
+	K_BN_set_word = (int (*)(BIGNUM *, BN_ULONG)) d->cryptoLib->resolve("BN_set_word");
+#endif
         K_BN_bn2hex = (char *(*)(const BIGNUM *)) d->cryptoLib->resolve("BN_bn2hex");
         K_X509_digest = (int (*)(const X509 *, const EVP_MD *, unsigned char *, unsigned int *)) d->cryptoLib->resolve("X509_digest");
         K_EVP_md5 = (EVP_MD * (*)()) d->cryptoLib->resolve("EVP_md5");
@@ -508,7 +551,12 @@
         K_X509_PURPOSE_get0 = (X509_PURPOSE * (*)(int)) d->cryptoLib->resolve("X509_PURPOSE_get0");
         K_EVP_PKEY_assign = (int (*)(EVP_PKEY *, int, char *)) d->cryptoLib->resolve("EVP_PKEY_assign");
         K_X509_REQ_set_pubkey = (int (*)(X509_REQ *, EVP_PKEY *)) d->cryptoLib->resolve("X509_REQ_set_pubkey");
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	K_RSA_new = (RSA * (*)()) d->cryptoLib->resolve("RSA_new");
+        K_RSA_generate_key_ex = (int (*)(RSA *, int, BIGNUM *, BN_GENCB *)) d->cryptoLib->resolve("RSA_generate_key_ex");
+#else	
         K_RSA_generate_key = (RSA * (*)(int, unsigned long, void (*)(int, int, void *), void *)) d->cryptoLib->resolve("RSA_generate_key");
+#endif
         K_i2d_X509_REQ_fp = (int (*)(FILE *, X509_REQ *)) d->cryptoLib->resolve("i2d_X509_REQ_fp");
         K_ERR_clear_error = (void (*)()) d->cryptoLib->resolve("ERR_clear_error");
         K_ERR_get_error = (unsigned long(*)()) d->cryptoLib->resolve("ERR_get_error");
@@ -528,7 +576,11 @@
         K_X509_NAME_add_entry_by_txt = (int (*)(X509_NAME *, char *, int, unsigned char *, int, int, int)) d->cryptoLib->resolve("X509_NAME_add_entry_by_txt");
         K_X509_NAME_new = (X509_NAME * (*)()) d->cryptoLib->resolve("X509_NAME_new");
         K_X509_REQ_set_subject_name = (int (*)(X509_REQ *, X509_NAME *)) d->cryptoLib->resolve("X509_REQ_set_subject_name");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_ASN1_STRING_data = (const unsigned char *(*)(const ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_get0_data");
+#else
         K_ASN1_STRING_data = (unsigned char *(*)(ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_data");
+#endif
         K_ASN1_STRING_length = (int (*)(ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_length");
 #endif
     }
@@ -565,7 +617,7 @@
             alib += *shit;
             QString tmpStr(alib);
             tmpStr.remove(QRegExp("\\(.*\\)"));
-            if (QFile(tmpStr).isReadable()) {
+            if (QFileInfo(tmpStr).isReadable()) {
                 d->sslLib = new QLibrary(alib);
                 d->sslLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
             }
@@ -606,8 +658,13 @@
                                    d->sslLib->resolve("SSL_get_current_cipher");
         K_SSL_ctrl = (long(*)(SSL *, int, long, char *))
                      d->sslLib->resolve("SSL_ctrl");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_TLSv1_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLS_client_method");
+        K_SSLv23_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLS_client_method");
+#else
         K_TLSv1_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLSv1_client_method");
         K_SSLv23_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("SSLv23_client_method");
+#endif
         K_SSL_get_peer_certificate = (X509 * (*)(SSL *)) d->sslLib->resolve("SSL_get_peer_certificate");
         K_SSL_CIPHER_get_bits = (int (*)(SSL_CIPHER *, int *)) d->sslLib->resolve("SSL_CIPHER_get_bits");
         K_SSL_CIPHER_get_version = (char *(*)(SSL_CIPHER *)) d->sslLib->resolve("SSL_CIPHER_get_version");
@@ -627,6 +684,7 @@
         K_SSL_get_ciphers = (STACK_OF(SSL_CIPHER) * (*)(const SSL *)) d->sslLib->resolve("SSL_get_ciphers");
 #endif
 
+	
         // Initialize the library (once only!)
         QFunctionPointer x;
         x = d->sslLib->resolve("SSL_library_init");
@@ -1264,6 +1322,36 @@
     }
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+int KOpenSSLProxy::sk_num(const OPENSSL_STACK *s)
+{
+    if (K_sk_num) {
+        return (K_sk_num)(s);
+    } else {
+        return -1;
+    }
+}
+
+void *KOpenSSLProxy::sk_pop(OPENSSL_STACK *s)
+{
+    if (K_sk_pop) {
+        return (K_sk_pop)(s);
+    } else {
+        return nullptr;
+    }
+}
+
+void *KOpenSSLProxy::sk_value(const OPENSSL_STACK *s, int n)
+{
+    if (K_sk_value) {
+        return (K_sk_value)(s, n);
+    } else {
+        return nullptr;
+    }
+}
+
+#else
+
 int KOpenSSLProxy::sk_num(STACK *s)
 {
     if (K_sk_num) {
@@ -1291,6 +1379,8 @@
     }
 }
 
+#endif
+
 void KOpenSSLProxy::X509_STORE_CTX_set_chain(X509_STORE_CTX *v, STACK_OF(X509)* x)
 {
     if (K_X509_STORE_CTX_set_chain) {
@@ -1305,6 +1395,36 @@
     }
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+OPENSSL_STACK *KOpenSSLProxy::sk_dup(const OPENSSL_STACK *s)
+{
+    if (K_sk_dup) {
+        return (K_sk_dup)(s);
+    } else {
+        return nullptr;
+    }
+}
+
+OPENSSL_STACK *KOpenSSLProxy::sk_new(OPENSSL_sk_compfunc cmp)
+{
+    if (K_sk_new) {
+        return (K_sk_new)(cmp);
+    } else {
+        return nullptr;
+    }
+}
+
+int KOpenSSLProxy::sk_push(OPENSSL_STACK *s, const void *d)
+{
+    if (K_sk_push) {
+        return (K_sk_push)(s, d);
+    } else {
+        return -1;
+    }
+}
+
+#else
+
 STACK *KOpenSSLProxy::sk_dup(STACK *s)
 {
     if (K_sk_dup) {
@@ -1332,6 +1452,8 @@
     }
 }
 
+#endif
+
 char *KOpenSSLProxy::i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, ASN1_INTEGER *aint)
 {
     if (K_i2s_ASN1_INTEGER) {
@@ -1376,6 +1498,33 @@
     return -1;
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+BIGNUM *KOpenSSLProxy::BN_new()
+{
+    if (K_BN_new) {
+	return (K_BN_new)();
+    } else {
+	return nullptr;
+    }
+}
+
+void KOpenSSLProxy::BN_free(BIGNUM *a)
+{
+    if (K_BN_free) {
+	(K_BN_free)(a);
+    }
+}
+
+int KOpenSSLProxy::BN_set_word(BIGNUM *a, BN_ULONG w)
+{
+    if (K_BN_set_word) {
+	return (K_BN_set_word)(a, w);
+    } else {
+	return -1;
+    }
+}
+#endif
+
 char *KOpenSSLProxy::BN_bn2hex(const BIGNUM *a)
 {
     if (K_BN_bn2hex) {
@@ -1758,6 +1907,24 @@
     }
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+RSA *KOpenSSLProxy::RSA_new()
+{
+    if (K_RSA_new) {
+	return (K_RSA_new)();
+    } else {
+	return nullptr;
+    }
+}
+int KOpenSSLProxy::RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
+{
+    if (K_RSA_generate_key_ex) {
+        return (K_RSA_generate_key_ex)(rsa, bits, e, cb);
+    } else {
+        return -1;
+    }
+}
+#else
 RSA *KOpenSSLProxy::RSA_generate_key(int bits, unsigned long e, void
                                      (*callback)(int, int, void *), void *cb_arg)
 {
@@ -1767,6 +1934,7 @@
         return nullptr;
     }
 }
+#endif
 
 STACK *KOpenSSLProxy::X509_get1_email(X509 *x)
 {
@@ -1970,7 +2138,11 @@
     return -1;
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+const unsigned char* KOpenSSLProxy::ASN1_STRING_data(const ASN1_STRING *x)
+#else
 unsigned char *KOpenSSLProxy::ASN1_STRING_data(ASN1_STRING *x)
+#endif
 {
     if (K_ASN1_STRING_data) {
         return (K_ASN1_STRING_data)(x);
