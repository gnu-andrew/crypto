--- a/src/kssl.old/kopenssl.h	2019-05-07 12:21:01.000000000 +0100
+++ b/src/kssl/kopenssl.h	2019-06-08 22:38:46.107180359 +0100
@@ -41,6 +41,9 @@
 #include <openssl/stack.h>
 #include <openssl/bn.h>
 #undef crypt
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#define STACK OPENSSL_STACK
+#else
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
 #define STACK _STACK
 #define OSSL_SKVALUE_RTYPE void
@@ -50,6 +53,7 @@
 #define OSSL_MORECONST
 #endif
 #endif
+#endif
 
 /**
  * Dynamically load and wrap OpenSSL.
@@ -578,6 +582,23 @@
      */
     int X509_check_private_key(X509 *x, EVP_PKEY *p);
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    /*
+     *  Allocate a BIGNUM
+     */
+    BIGNUM *BN_new();
+
+    /*
+     *  Free a BIGNUM
+     */
+    void BN_free(BIGNUM *a);
+
+    /*
+     *  Set a BIGNUM
+     */
+    int BN_set_word(BIGNUM *a, BN_ULONG w);
+#endif
+
     /*
      *  Convert a BIGNUM to a hex string
      */
@@ -601,7 +622,11 @@
     /*
      *  ASN1_STRING_data
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    const unsigned char* ASN1_STRING_data(const ASN1_STRING *x);
+#else
     unsigned char *ASN1_STRING_data(ASN1_STRING *x);
+#endif
 
     /*
      *  ASN1_STRING_length
@@ -796,8 +821,12 @@
     /*
      * Generate a RSA key
      */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
+#else
     RSA *RSA_generate_key(int bits, unsigned long e, void
                           (*callback)(int, int, void *), void *cb_arg);
+#endif
 
     /*
      * Create/destroy a certificate request
@@ -853,6 +882,11 @@
     /* Write PKCS#8privatekey to FILE stream */
     int i2d_PKCS8PrivateKey_fp(FILE *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *);
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    /* Allocate an RSA structure */
+    RSA *RSA_new();
+#endif
+
     /* Free RSA structure */
     void RSA_free(RSA *);
 
--- a/src/kssl.old/kopenssl.cpp	2019-05-07 12:21:01.000000000 +0100
+++ b/src/kssl/kopenssl.cpp	2019-06-08 22:47:22.235185483 +0100
@@ -28,6 +28,7 @@
 #include <kconfiggroup.h>
 #include <QCoreApplication>
 #include <QFile>
+#include <QFileInfo>
 #include <QLibrary>
 #include <QRegExp>
 
@@ -135,6 +136,11 @@
     static EVP_PKEY *(*K_X509_get_pubkey)(X509 *) = nullptr;
     static int (*K_i2d_PublicKey)(EVP_PKEY *, unsigned char **) = nullptr;
     static int (*K_X509_check_private_key)(X509 *, EVP_PKEY *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    static BIGNUM *(*K_BN_new)() = nullptr;
+    static void (*K_BN_free)(BIGNUM *) = nullptr;
+    static int (*K_BN_set_word)(BIGNUM *, BN_ULONG w) = nullptr;
+#endif
     static char *(*K_BN_bn2hex)(const BIGNUM *) = nullptr;
     static int (*K_X509_digest)(const X509 *, const EVP_MD *, unsigned char *, unsigned int *) = nullptr;
     static EVP_MD *(*K_EVP_md5)() = nullptr;
@@ -176,7 +182,12 @@
     static void (*K_DSA_get0_pqg)(DSA *, const BIGNUM **, const BIGNUM **, const BIGNUM **) = nullptr;
     static void (*K_DSA_get0_key)(DSA *, const BIGNUM **, const BIGNUM **) = nullptr;
     static int (*K_X509_REQ_set_pubkey)(X509_REQ *, EVP_PKEY *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+    static RSA *(*K_RSA_new)();
+    static int (*K_RSA_generate_key_ex)(RSA* rsa, int bits, BIGNUM *e, BN_GENCB* cb);
+#else
     static RSA *(*K_RSA_generate_key)(int, unsigned long, void (*)(int, int, void *), void *) = nullptr;
+#endif
     static int (*K_i2d_X509_REQ_fp)(FILE *, X509_REQ *) = nullptr;
     static void (*K_ERR_clear_error)() = nullptr;
     static unsigned long(*K_ERR_get_error)() = nullptr;
@@ -206,7 +217,11 @@
     static int (*K_X509_NAME_add_entry_by_txt)(X509_NAME *, char *, int, unsigned char *, int, int, int) = nullptr;
     static X509_NAME *(*K_X509_NAME_new)() = nullptr;
     static int (*K_X509_REQ_set_subject_name)(X509_REQ *, X509_NAME *) = nullptr;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    static const unsigned char *(*K_ASN1_STRING_data)(const ASN1_STRING *) = nullptr;
+#else
     static unsigned char *(*K_ASN1_STRING_data)(ASN1_STRING *) = nullptr;
+#endif
     static int (*K_ASN1_STRING_length)(ASN1_STRING *) = nullptr;
     static STACK_OF(SSL_CIPHER) *(*K_SSL_get_ciphers)(const SSL *ssl) = nullptr;
 
@@ -407,7 +422,7 @@
             // someone knows why this is needed?
             QString tmpStr(alib);
             tmpStr.remove(QRegExp("\\(.*\\)"));
-            if (QFile(tmpStr).isReadable()) {
+            if (QFileInfo(tmpStr).isReadable()) {
                 d->cryptoLib = new QLibrary(alib);
                 d->cryptoLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
             }
@@ -480,7 +495,11 @@
         K_EVP_PKEY_new = (EVP_PKEY * (*)()) d->cryptoLib->resolve("EVP_PKEY_new");
         K_X509_REQ_free = (void (*)(X509_REQ *)) d->cryptoLib->resolve("X509_REQ_free");
         K_X509_REQ_new = (X509_REQ * (*)()) d->cryptoLib->resolve("X509_REQ_new");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_X509_STORE_CTX_set_chain = (void (*)(X509_STORE_CTX *, STACK_OF(X509) *)) d->cryptoLib->resolve("X509_STORE_CTX_set0_untrusted");
+#else
         K_X509_STORE_CTX_set_chain = (void (*)(X509_STORE_CTX *, STACK_OF(X509) *)) d->cryptoLib->resolve("X509_STORE_CTX_set_chain");
+#endif
         K_X509_STORE_CTX_set_purpose = (void (*)(X509_STORE_CTX *, int)) d->cryptoLib->resolve("X509_STORE_CTX_set_purpose");
         K_X509_STORE_CTX_get_current_cert = (X509 * (*)(X509_STORE_CTX *)) d->cryptoLib->resolve("X509_STORE_CTX_get_current_cert");
         K_X509_STORE_CTX_set_error = (void (*)(X509_STORE_CTX *, int)) d->cryptoLib->resolve("X509_STORE_CTX_set_error");
@@ -507,6 +526,11 @@
         K_X509_get_pubkey = (EVP_PKEY * (*)(X509 *)) d->cryptoLib->resolve("X509_get_pubkey");
         K_i2d_PublicKey = (int (*)(EVP_PKEY *, unsigned char **)) d->cryptoLib->resolve("i2d_PublicKey");
         K_X509_check_private_key = (int (*)(X509 *, EVP_PKEY *)) d->cryptoLib->resolve("X509_check_private_key");
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	K_BN_new = (BIGNUM *(*)()) d->cryptoLib->resolve("BN_new");
+	K_BN_free = (void (*)(BIGNUM *)) d->cryptoLib->resolve("BN_free");
+	K_BN_set_word = (int (*)(BIGNUM *, BN_ULONG)) d->cryptoLib->resolve("BN_set_word");
+#endif
         K_BN_bn2hex = (char *(*)(const BIGNUM *)) d->cryptoLib->resolve("BN_bn2hex");
         K_X509_digest = (int (*)(const X509 *, const EVP_MD *, unsigned char *, unsigned int *)) d->cryptoLib->resolve("X509_digest");
         K_EVP_md5 = (EVP_MD * (*)()) d->cryptoLib->resolve("EVP_md5");
@@ -552,7 +576,12 @@
         K_DSA_get0_pqg = (void (*)(DSA *, const BIGNUM **, const BIGNUM **, const BIGNUM **)) d->cryptoLib->resolve("DSA_get0_pqg");
         K_DSA_get0_key = (void (*)(DSA *, const BIGNUM **, const BIGNUM **)) d->cryptoLib->resolve("DSA_get0_key");
         K_X509_REQ_set_pubkey = (int (*)(X509_REQ *, EVP_PKEY *)) d->cryptoLib->resolve("X509_REQ_set_pubkey");
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+	K_RSA_new = (RSA * (*)()) d->cryptoLib->resolve("RSA_new");
+        K_RSA_generate_key_ex = (int (*)(RSA *, int, BIGNUM *, BN_GENCB *)) d->cryptoLib->resolve("RSA_generate_key_ex");
+#else	
         K_RSA_generate_key = (RSA * (*)(int, unsigned long, void (*)(int, int, void *), void *)) d->cryptoLib->resolve("RSA_generate_key");
+#endif
         K_i2d_X509_REQ_fp = (int (*)(FILE *, X509_REQ *)) d->cryptoLib->resolve("i2d_X509_REQ_fp");
         K_ERR_clear_error = (void (*)()) d->cryptoLib->resolve("ERR_clear_error");
         K_ERR_get_error = (unsigned long(*)()) d->cryptoLib->resolve("ERR_get_error");
@@ -572,7 +601,11 @@
         K_X509_NAME_add_entry_by_txt = (int (*)(X509_NAME *, char *, int, unsigned char *, int, int, int)) d->cryptoLib->resolve("X509_NAME_add_entry_by_txt");
         K_X509_NAME_new = (X509_NAME * (*)()) d->cryptoLib->resolve("X509_NAME_new");
         K_X509_REQ_set_subject_name = (int (*)(X509_REQ *, X509_NAME *)) d->cryptoLib->resolve("X509_REQ_set_subject_name");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_ASN1_STRING_data = (const unsigned char *(*)(const ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_get0_data");
+#else
         K_ASN1_STRING_data = (unsigned char *(*)(ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_data");
+#endif
         K_ASN1_STRING_length = (int (*)(ASN1_STRING *)) d->cryptoLib->resolve("ASN1_STRING_length");
 #endif
     }
@@ -609,7 +642,7 @@
             alib += *shit;
             QString tmpStr(alib);
             tmpStr.remove(QRegExp("\\(.*\\)"));
-            if (QFile(tmpStr).isReadable()) {
+            if (QFileInfo(tmpStr).isReadable()) {
                 d->sslLib = new QLibrary(alib);
                 d->sslLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
             }
@@ -650,8 +683,13 @@
                                    d->sslLib->resolve("SSL_get_current_cipher");
         K_SSL_ctrl = (long(*)(SSL *, int, long, char *))
                      d->sslLib->resolve("SSL_ctrl");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        K_TLSv1_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLS_client_method");
+        K_SSLv23_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLS_client_method");
+#else
         K_TLSv1_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("TLSv1_client_method");
         K_SSLv23_client_method = (SSL_METHOD * (*)()) d->sslLib->resolve("SSLv23_client_method");
+#endif
         K_SSL_get_peer_certificate = (X509 * (*)(SSL *)) d->sslLib->resolve("SSL_get_peer_certificate");
         K_SSL_CIPHER_get_bits = (int (*)(SSL_CIPHER *, int *)) d->sslLib->resolve("SSL_CIPHER_get_bits");
         K_SSL_CIPHER_get_version = (char *(*)(SSL_CIPHER *)) d->sslLib->resolve("SSL_CIPHER_get_version");
@@ -1519,6 +1557,33 @@
     return -1;
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+BIGNUM *KOpenSSLProxy::BN_new()
+{
+    if (K_BN_new) {
+	return (K_BN_new)();
+    } else {
+	return nullptr;
+    }
+}
+
+void KOpenSSLProxy::BN_free(BIGNUM *a)
+{
+    if (K_BN_free) {
+	(K_BN_free)(a);
+    }
+}
+
+int KOpenSSLProxy::BN_set_word(BIGNUM *a, BN_ULONG w)
+{
+    if (K_BN_set_word) {
+	return (K_BN_set_word)(a, w);
+    } else {
+	return -1;
+    }
+}
+#endif
+
 char *KOpenSSLProxy::BN_bn2hex(const BIGNUM *a)
 {
     if (K_BN_bn2hex) {
@@ -1994,6 +2059,24 @@
     }
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+RSA *KOpenSSLProxy::RSA_new()
+{
+    if (K_RSA_new) {
+	return (K_RSA_new)();
+    } else {
+	return nullptr;
+    }
+}
+int KOpenSSLProxy::RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
+{
+    if (K_RSA_generate_key_ex) {
+        return (K_RSA_generate_key_ex)(rsa, bits, e, cb);
+    } else {
+        return -1;
+    }
+}
+#else
 RSA *KOpenSSLProxy::RSA_generate_key(int bits, unsigned long e, void
                                      (*callback)(int, int, void *), void *cb_arg)
 {
@@ -2003,6 +2086,7 @@
         return nullptr;
     }
 }
+#endif
 
 STACK *KOpenSSLProxy::X509_get1_email(X509 *x)
 {
@@ -2206,7 +2290,11 @@
     return -1;
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+const unsigned char* KOpenSSLProxy::ASN1_STRING_data(const ASN1_STRING *x)
+#else
 unsigned char *KOpenSSLProxy::ASN1_STRING_data(ASN1_STRING *x)
+#endif
 {
     if (K_ASN1_STRING_data) {
         return (K_ASN1_STRING_data)(x);
