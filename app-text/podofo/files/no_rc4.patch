--- ./src/doc/PdfMemDocument.h.orig	2014-04-06 13:08:50.000000000 +0100
+++ ./src/doc/PdfMemDocument.h	2016-07-07 17:13:08.227673099 +0100
@@ -299,7 +299,7 @@
                                         PdfEncrypt::ePdfPermissions_Accessible |
                                         PdfEncrypt::ePdfPermissions_DocAssembly |
                                         PdfEncrypt::ePdfPermissions_HighPrint,
-                       PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_RC4V1,
+                       PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_AESV2,
                        PdfEncrypt::EPdfKeyLength eKeyLength = PdfEncrypt::ePdfKeyLength_40 );
 
     /** Encrypt the document during writing using a PdfEncrypt object
--- ./src/base/PdfEncrypt.cpp.orig	2016-07-06 03:58:04.553702027 +0100
+++ ./src/base/PdfEncrypt.cpp	2016-07-07 21:35:30.718616342 +0100
@@ -51,19 +51,22 @@
     //RG: TODO Could we name literal 256 and use the literal name e.g.
     //const size_t KEY_SIZE = 256;
 }
-
 namespace PoDoFo {
 
 #ifdef PODOFO_HAVE_LIBIDN
 int PdfEncrypt::s_nEnabledEncryptionAlgorithms = 
+#ifndef OPENSSL_NO_RC4
 ePdfEncryptAlgorithm_RC4V1 |
 ePdfEncryptAlgorithm_RC4V2 |
+#endif // OPENSSL_NO_RC4
 ePdfEncryptAlgorithm_AESV2 |
 ePdfEncryptAlgorithm_AESV3;
 #else // PODOFO_HAVE_LIBIDN
 int PdfEncrypt::s_nEnabledEncryptionAlgorithms =
+#ifndef OPENSSL_NO_RC4
 ePdfEncryptAlgorithm_RC4V1 |
 ePdfEncryptAlgorithm_RC4V2 |
+#endif // OPENSSL_NO_RC4
 ePdfEncryptAlgorithm_AESV2;
 #endif // PODOFO_HAVE_LIBIDN
 
@@ -94,6 +97,7 @@
         EVP_CIPHER_CTX aes;
 };
 
+#ifndef OPENSSL_NO_RC4
 // A class that holds the RC4 Crypto object
 // Either CCCrpytor or EVP_CIPHER_CTX
 class RC4CryptoEngine {
@@ -290,6 +294,7 @@
     PdfInputStream* m_pInputStream;
     PdfRC4Stream    m_stream;
 };
+#endif // OPENSSL_NO_RC4
 
 /** A class that can encrypt/decrpyt streamed data block wise
  *  This is used in the input and output stream encryption implementation.
@@ -454,11 +459,13 @@
             pdfEncrypt = new PdfEncryptAESV3(userPassword, ownerPassword, protection);
             break;
 #endif // PODOFO_HAVE_LIBIDN
+#ifndef OPENSSL_NO_RC4
         case ePdfEncryptAlgorithm_RC4V2:           
         case ePdfEncryptAlgorithm_RC4V1:
         default:
             pdfEncrypt = new PdfEncryptRC4(userPassword, ownerPassword, protection, eAlgorithm, eKeyLength);
             break;
+#endif // OPENSSL_NO_RC4
     }
     return pdfEncrypt;
 }
@@ -530,7 +537,13 @@
         throw e;
     }
     
-    if( (lV == 1L) && (rValue == 2L || rValue == 3L)
+    if( (lV == 4L) && (rValue == 4L)
+            && PdfEncrypt::IsEncryptionEnabled( ePdfEncryptAlgorithm_AESV2 ) ) 
+    {
+        pdfEncrypt = new PdfEncryptAESV2(oValue, uValue, pValue, encryptMetadata);      
+    }
+#ifndef OPENSSL_NO_RC4
+    else if( (lV == 1L) && (rValue == 2L || rValue == 3L)
        && PdfEncrypt::IsEncryptionEnabled( ePdfEncryptAlgorithm_RC4V1 ) ) 
     {
         pdfEncrypt = new PdfEncryptRC4(oValue, uValue, pValue, rValue, ePdfEncryptAlgorithm_RC4V1, 40, encryptMetadata);
@@ -541,11 +554,7 @@
         // [Alexey] - lLength is pdf_int64. Please make changes in encryption algorithms
         pdfEncrypt = new PdfEncryptRC4(oValue, uValue, pValue, rValue, ePdfEncryptAlgorithm_RC4V2, static_cast<int>(lLength), encryptMetadata);
     }
-    else if( (lV == 4L) && (rValue == 4L)
-            && PdfEncrypt::IsEncryptionEnabled( ePdfEncryptAlgorithm_AESV2 ) ) 
-    {
-        pdfEncrypt = new PdfEncryptAESV2(oValue, uValue, pValue, encryptMetadata);      
-    }
+#endif // OPENSSL_NO_RC4
 #ifdef PODOFO_HAVE_LIBIDN
     else if( (lV == 5L) && (rValue == 5L) 
             && PdfEncrypt::IsEncryptionEnabled( ePdfEncryptAlgorithm_AESV3 ) ) 
@@ -577,8 +586,10 @@
     else if (rhs.m_eAlgorithm == ePdfEncryptAlgorithm_AESV3)
         pdfEncrypt = new PdfEncryptAESV3(rhs);
 #endif // PODOFO_HAVE_LIBIDN
+#ifndef OPENSSL_NO_RC4
     else
         pdfEncrypt = new PdfEncryptRC4(rhs);
+#endif // OPENSSL_NO_RC4
     return pdfEncrypt;
 }
 
@@ -887,12 +898,16 @@
 
 PdfEncryptRC4Base::PdfEncryptRC4Base()
 {
+#ifndef OPENSSL_NO_RC4
     m_rc4 = new RC4CryptoEngine();
+#endif // OPENSSL_NO_RC4
 }
 
 PdfEncryptRC4Base::~PdfEncryptRC4Base()
 {
+#ifndef OPENSSL_NO_RC4
     delete m_rc4;
+#endif // OPENSSL_NO_RC4
 }
     
 /**
@@ -904,6 +919,7 @@
                        const unsigned char* textin, pdf_long textlen,
                        unsigned char* textout, pdf_long textoutlen)
 {
+#ifndef OPENSSL_NO_RC4
     EVP_CIPHER_CTX* rc4 = m_rc4->getEngine();
     
     if(textlen != textoutlen)
@@ -931,8 +947,9 @@
     status = EVP_EncryptFinal_ex(rc4, &textout[dataOutMoved], &dataOutMoved);
     if(status != 1)
         PODOFO_RAISE_ERROR_INFO( ePdfError_InternalLogic, "Error RC4-encrypting data" );
+#endif // OPENSSL_NO_RC4
 }
-        
+
 void
 PdfEncryptMD5Base::GetMD5Binary(const unsigned char* data, int length, unsigned char* digest)
 {
@@ -973,10 +990,12 @@
         PdfDictionary cf;
         PdfDictionary stdCf;
         
+#ifndef OPENSSL_NO_RC4
 		if(m_eAlgorithm == ePdfEncryptAlgorithm_RC4V2)
 			stdCf.AddKey( PdfName("CFM"), PdfName("V2") );
 		else
 			stdCf.AddKey( PdfName("CFM"), PdfName("AESV2") );
+#endif // OPENSSL_NO_RC4
         stdCf.AddKey( PdfName("Length"), static_cast<pdf_int64>(PODOFO_LL_LITERAL(16)) );
         
         rDictionary.AddKey( PdfName("O"), PdfString( reinterpret_cast<const char*>(this->GetOValue()), 32, true ) );
@@ -995,6 +1014,7 @@
 		if(!m_bEncryptMetadata)
 			rDictionary.AddKey( PdfName("EncryptMetadata"), PdfVariant( false ) );
 	}
+#ifndef OPENSSL_NO_RC4
     else if(m_eAlgorithm == ePdfEncryptAlgorithm_RC4V1)
     {
         rDictionary.AddKey( PdfName("V"), static_cast<pdf_int64>(PODOFO_LL_LITERAL(1)) );
@@ -1007,12 +1027,14 @@
         rDictionary.AddKey( PdfName("R"), static_cast<pdf_int64>(PODOFO_LL_LITERAL(3)) );
 		rDictionary.AddKey( PdfName("Length"), PdfVariant( static_cast<pdf_int64>(m_eKeyLength) ) );
     }
+#endif // OPENSSL_NO_RC4
     
     rDictionary.AddKey( PdfName("O"), PdfString( reinterpret_cast<const char*>(this->GetOValue()), 32, true ) );
     rDictionary.AddKey( PdfName("U"), PdfString( reinterpret_cast<const char*>(this->GetUValue()), 32, true ) );
     rDictionary.AddKey( PdfName("P"), PdfVariant( static_cast<pdf_int64>(this->GetPValue()) ) );
 }
     
+#ifndef OPENSSL_NO_RC4
 void
 PdfEncryptRC4::GenerateEncryptionKey(const PdfString & documentId)
 {
@@ -1171,6 +1193,7 @@
     
     return new PdfRC4OutputStream( pOutputStream, m_rc4key, m_rc4last, objkey, keylen );
 }
+#endif // OPENSSL_NO_RC4
     
 PdfEncryptAESBase::PdfEncryptAESBase()
 {
--- ./src/base/PdfEncrypt.h.orig	2014-06-06 23:13:22.000000000 +0100
+++ ./src/base/PdfEncrypt.h	2016-07-07 17:08:22.604379092 +0100
@@ -38,6 +38,10 @@
 #include "PdfString.h"
 #include "PdfReference.h"
 
+#ifdef PODOFO_HAVE_OPENSSL
+#include <openssl/opensslconf.h>
+#endif
+
 namespace PoDoFo {
 
 class PdfDictionary;
@@ -109,8 +113,10 @@
      * The encryption algorithm.
      */
     typedef enum {
+#ifndef OPENSSL_NO_RC4
         ePdfEncryptAlgorithm_RC4V1 = 1, ///< RC4 Version 1 encryption using a 40bit key
         ePdfEncryptAlgorithm_RC4V2 = 2, ///< RC4 Version 2 encryption using a key with 40-128bit
+#endif // OPENSSL_NO_RC4
         ePdfEncryptAlgorithm_AESV2 = 4  ///< AES encryption with a 128 bit key (PDF1.6)
 #ifdef PODOFO_HAVE_LIBIDN
         ,ePdfEncryptAlgorithm_AESV3 = 8 ///< AES encryption with a 256 bit key (PDF1.7 extension 3) - Support added by P. Zent
@@ -141,7 +147,7 @@
                                           ePdfPermissions_Accessible |
                                           ePdfPermissions_DocAssembly |
                                           ePdfPermissions_HighPrint,
-                                          EPdfEncryptAlgorithm eAlgorithm = ePdfEncryptAlgorithm_RC4V1, 
+                                          EPdfEncryptAlgorithm eAlgorithm = ePdfEncryptAlgorithm_AESV2, 
                                           EPdfKeyLength eKeyLength = ePdfKeyLength_40 );
 
     /** Initialize a PdfEncrypt object from an encryption dictionary in a PDF file.
@@ -718,6 +724,8 @@
 
 #endif // PODOFO_HAVE_LIBIDN
 
+#ifndef OPENSSL_NO_RC4
+
 /** A class that is used to encrypt a PDF file (RC4 40-bit and 128-bit)
  *
  *  Client code is working only with PdfEncrypt class and knows nothing
@@ -768,6 +776,7 @@
     
     virtual pdf_long CalculateStreamLength(pdf_long length) const;
 };
+#endif // OPENSSL_NO_RC4
 
 // -----------------------------------------------------
 // 
--- ./tools/podofoencrypt/podofoencrypt.cpp.orig	2016-07-07 21:37:39.228513466 +0100
+++ ./tools/podofoencrypt/podofoencrypt.cpp	2016-07-07 21:41:03.441143700 +0100
@@ -43,17 +43,21 @@
     EPdfVersion   eVersion;
     switch( eAlgorithm ) 
     {
+#ifndef OPENSSL_NO_RC4
         case PdfEncrypt::ePdfEncryptAlgorithm_RC4V1:
             eKeyLength = PdfEncrypt::ePdfKeyLength_40;
             eVersion   = ePdfVersion_1_3;
             break;
+#endif // OPENSSL_NO_RC4
 #ifdef PODOFO_HAVE_LIBIDN
         case PdfEncrypt::ePdfEncryptAlgorithm_AESV3:;
             eKeyLength = PdfEncrypt::ePdfKeyLength_256;
             eVersion   = ePdfVersion_1_7;
             break;
 #endif // PODOFO_HAVE_LIBIDN
+#ifndef OPENSSL_NO_RC4
         case PdfEncrypt::ePdfEncryptAlgorithm_RC4V2:
+#endif // OPENSSL_NO_RC4
         case PdfEncrypt::ePdfEncryptAlgorithm_AESV2:
         default:
             eKeyLength = PdfEncrypt::ePdfKeyLength_128;
@@ -74,13 +78,19 @@
 
 void print_help()
 {
-    printf("Usage: podofoencrypt [--rc4v1] [--rc4v2] [--aesv2] [--aesv3] [-u <userpassword>]\n");
+#ifdef OPENSSL_NO_RC4
+    printf("Usage: podofoencrypt [--aesv2] [--aesv3] [-u <userpassword>]\n");
+#else
+    printf("Usage: podofoencrypt [--rc4v1] [--rc4v2] [--aesv2] [--aesv3] [-u <userpassword>]\n");   
+#endif // OPENSSL_NO_RC4
     printf("                     -o <ownerpassword> <inputfile> <outputfile>\n\n");
     printf("       This tool encrypts an existing PDF file.\n\n");
     printf("       --help        Display this help text\n");
     printf(" Algorithm:\n");
+#ifndef OPENSSL_NO_RC4
     printf("       --rc4v1       Use rc4v1 encryption\n");
     printf("       --rc4v2       Use rc4v2 encryption (Default value)\n");
+#endif // OPENSSL_NO_RC4
     printf("       --aesv2       Use aes-128 encryption\n");
     printf("       --aesv3       Use aes-256 encryption\n");
     printf(" Passwords:\n");
@@ -102,7 +112,7 @@
 {
   const char*                      pszInput   = NULL;
   const char*                      pszOutput  = NULL;
-  PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_RC4V1;
+  PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_AESV2;
   int                              nPerm      = 0;
   std::string                      userPass;
   std::string                      ownerPass;
@@ -118,12 +128,14 @@
   {
       if( argv[i][0] == '-' ) 
       {
-          if( strcmp( argv[i], "--rc4v1" ) == 0 ) 
+          if( strcmp( argv[i], "--aesv2" ) == 0 ) 
+              eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_AESV2;
+#ifndef OPENSSL_NO_RC4
+          else if( strcmp( argv[i], "--rc4v1" ) == 0 ) 
               eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_RC4V1;
           else if( strcmp( argv[i], "--rc4v2" ) == 0 ) 
               eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_RC4V2;
-          else if( strcmp( argv[i], "--aesv2" ) == 0 ) 
-              eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_AESV2;
+#endif // OPENSSL_NO_RC4
 #ifdef PODOFO_HAVE_LIBIDN
           else if( strcmp( argv[i], "--aesv3" ) == 0 ) 
               eAlgorithm = PdfEncrypt::ePdfEncryptAlgorithm_AESV3;
--- ./test/unit/EncryptTest.h.orig	2016-07-08 00:48:40.876713646 +0100
+++ ./test/unit/EncryptTest.h	2016-07-08 00:49:21.436057569 +0100
@@ -34,12 +34,14 @@
 {
   CPPUNIT_TEST_SUITE( EncryptTest );
   CPPUNIT_TEST( testDefault );
+#ifndef OPENSSL_NO_RC4
   CPPUNIT_TEST( testRC4 );
   CPPUNIT_TEST( testRC4v2_40 );
   CPPUNIT_TEST( testRC4v2_56 );
   CPPUNIT_TEST( testRC4v2_80 );
   CPPUNIT_TEST( testRC4v2_96 );
   CPPUNIT_TEST( testRC4v2_128 );
+#endif // OPENSSL_NO_RC4
   CPPUNIT_TEST( testAESV2 );
 #ifdef PODOFO_HAVE_LIBIDN
   CPPUNIT_TEST( testAESV3 );
@@ -54,12 +56,14 @@
   void tearDown();
 
   void testDefault();
+#ifndef OPENSSL_NO_RC4
   void testRC4();
   void testRC4v2_40();
   void testRC4v2_56();
   void testRC4v2_80();
   void testRC4v2_96();
   void testRC4v2_128();
+#endif // OPENSSL_NO_RC4
   void testAESV2();
 #ifdef PODOFO_HAVE_LIBIDN
   void testAESV3();
--- ./test/unit/EncryptTest.cpp.orig	2016-07-07 23:15:17.767766288 +0100
+++ ./test/unit/EncryptTest.cpp	2016-07-08 00:47:15.046101720 +0100
@@ -66,6 +66,7 @@
     delete pEncrypt;
 }
 
+#ifndef OPENSSL_NO_RC4
 void EncryptTest::testRC4() 
 {
     PdfEncrypt* pEncrypt = PdfEncrypt::CreatePdfEncrypt( "user", "podofo", m_protection,
@@ -138,6 +139,7 @@
 
     delete pEncrypt;
 }
+#endif // OPENSSL_NO_RC4
 
 void EncryptTest::testAESV2() 
 {
@@ -321,20 +323,27 @@
     int nDefault = PdfEncrypt::GetEnabledEncryptionAlgorithms();
 
     // By default every algorithms should be enabled
+#ifndef OPENSSL_NO_RC4
     CPPUNIT_ASSERT( PdfEncrypt::IsEncryptionEnabled( PdfEncrypt::ePdfEncryptAlgorithm_RC4V1 ) );
     CPPUNIT_ASSERT( PdfEncrypt::IsEncryptionEnabled( PdfEncrypt::ePdfEncryptAlgorithm_RC4V2 ) );
+#endif // OPENSSL_NO_RC4
     CPPUNIT_ASSERT( PdfEncrypt::IsEncryptionEnabled( PdfEncrypt::ePdfEncryptAlgorithm_AESV2 ) );
 #ifdef PODOFO_HAVE_LIBIDN
     CPPUNIT_ASSERT( PdfEncrypt::IsEncryptionEnabled( PdfEncrypt::ePdfEncryptAlgorithm_AESV3 ) );
 #endif // PODOFO_HAVE_LIBIDN
+#ifndef OPENSSL_NO_RC4
     CPPUNIT_ASSERT_EQUAL( PdfEncrypt::ePdfEncryptAlgorithm_RC4V1 |
                           PdfEncrypt::ePdfEncryptAlgorithm_RC4V2 |
                           PdfEncrypt::ePdfEncryptAlgorithm_AESV2
+#else
+    CPPUNIT_ASSERT_EQUAL( PdfEncrypt::ePdfEncryptAlgorithm_AESV2 
+#endif // OPENSSL_NO_RC4
 #ifdef PODOFO_HAVE_LIBIDN
                           | PdfEncrypt::ePdfEncryptAlgorithm_AESV3
 #endif // PODOFO_HAVE_LIBIDN
                                                                    ,
                           PdfEncrypt::GetEnabledEncryptionAlgorithms() );
+#ifndef OPENSSL_NO_RC4
     // Disable AES
     PdfEncrypt::SetEnabledEncryptionAlgorithms( PdfEncrypt::ePdfEncryptAlgorithm_RC4V1 |
                                                 PdfEncrypt::ePdfEncryptAlgorithm_RC4V2 );
@@ -346,6 +355,7 @@
     CPPUNIT_ASSERT_EQUAL( PdfEncrypt::ePdfEncryptAlgorithm_RC4V1 |
                           PdfEncrypt::ePdfEncryptAlgorithm_RC4V2,
                           PdfEncrypt::GetEnabledEncryptionAlgorithms() );
+#endif // OPENSSL_NO_RC4
 
 
     PdfObject object;
